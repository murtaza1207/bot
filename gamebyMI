-- Snake and Ladders Game
-- Importing required modules
local json = require("json")


-- Global Variables and Setup
GameMode = "Not-Started"
WaitTime = 120000 -- 2 minutes in milliseconds
GameTime = 900000 -- 15 minutes in milliseconds
Now = 0 -- This will be updated with the actual time


PaymentToken = "CRED"  -- Currency of the game
DepositQty = 1  -- Quantity of cred required to participate
MinimumPlayers = 2

Players = {}
Waiting = {}
Ladders = {{4, 56}, {12, 50}, {14, 55}, {22, 58}, {41, 79}, {54, 88}}
Snakes = {{3, 37}, {10, 28}, {48, 16}, {75, 32}, {94, 71}, {96, 42}, {86, 51}}

function initializeGame()
    GameMode = "Not-Started"
    Players = {}
    Waiting = {}
end

function startWaitingPeriod()
    GameMode = "Waiting"
    Now = os.time() * 1000 -- Update current time in milliseconds
    print("The game is about to begin! Please send " .. PaymentToken .. " to participate.")
end

function checkStartConditions()
    if #Waiting >= MinimumPlayers then
        startGame()
    else
        print("Not enough players registered! Waiting for more players...")
    end
end

function startGame()
    GameMode = "Playing"
    Now = os.time() * 1000 -- Update current time in milliseconds
    for playerId, _ in pairs(Waiting) do
        Players[playerId] = {position = 1, score = 0}
        Waiting[playerId] = nil -- Remove player from waiting list
    end
    print("Game started. Good luck to all players!")
end

-- Movement Function: Handles player movement based on dice roll
function 
movePlayer(playerId)
    local player = Players[playerId]
    if not player then
        print("Player not found.")
        return
    end

    local diceRoll = rollDice()
    print("Player " .. playerId .. " rolled a " .. diceRoll)

    -- Check if the dice roll is a 6
    if diceRoll == 6 then
        print("Player " .. playerId .. " rolled a 6 and gets another turn!")
        movePlayer(playerId)  -- Call movePlayer recursively for another turn
        return
    end

    -- Move the player
    local newPosition = player.position + diceRoll
    player.position = newPosition

    -- Check for Ladders and Snakes
    for _, ladder in ipairs(Ladders) do
        if ladder[1] == newPosition then
            player.position = ladder[2]
            print("Player " .. playerId .. " climbed a ladder to position " .. ladder[2])
            break
        end
    end

    for _, snake in ipairs(Snakes) do
        if snake[1] == newPosition then
            player.position = snake[2]
            print("Player " .. playerId .. " encountered a snake and moved down to position " .. snake[2])
            break
        end
    end

    -- Check for collisions with other players
    for otherPlayerId, otherPlayer in pairs(Players) do
        if otherPlayerId ~= playerId and otherPlayer.position == newPosition then
            newPosition = math.max(newPosition - 10, 1)  -- Move back by 10 or to position 1 (whichever is higher)
            print("Player " .. playerId .. " collided with Player " .. otherPlayerId .. " and moved back to position " .. newPosition)
            player.position = newPosition
        end
    end

    -- Check if the player reached the final position
    if newPosition >= 100 then
        endGame(playerId)
    end
end


function checkGameOver()
    if GameMode ~= "Playing" then return end

    local currentTime = os.time() * 1000
    if currentTime >= (Now + GameTime) then
        endGame(nil)  -- Game over due to time expiration
    end
end

function endGame(winnerId)
    print("Game Over")

    -- Calculate and distribute rewards
    local totalCred = 0
    for playerId, player in pairs(Players) do
        totalCred = totalCred + DepositQty  -- Add deposited cred by each player
        if playerId == winnerId then
            sendReward(winnerId, totalCred, "Winning the game")
        end
    end

    initializeGame() -- Restart the game
end

-- Sends a reward to a player.
-- @param recipient: The player receiving the reward.
-- @param qty: The quantity of the reward.
-- @param reason: The reason for the reward.
function sendReward(recipient, qty, reason)
    -- Implement reward distribution logic here
    print("Sending reward to player " .. recipient .. ": " .. qty .. " " .. PaymentToken .. " for " .. reason)
end

-- Player registration and payment handling
function registerPlayer(playerId)
    if GameMode ~= "Waiting" then
        print("Cannot register player, game is not in waiting mode.")
        return
    end

    Waiting[playerId] = true
    print("Player " .. playerId .. " registered for the game.")
end

function unregisterPlayer(playerId)
    if GameMode ~= "Waiting" then
        print("Cannot unregister player, game is not in waiting mode.")
        return
    end

    Waiting[playerId] = nil
    print("Player " .. playerId .. " unregistered from the game.")
end

-- Main game loop
function gameLoop()
    checkGameOver()
end

-- Initialize the game
initializeGame()
startWaitingPeriod()
